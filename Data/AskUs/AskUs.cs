

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Data\App.config"
//     Connection String Name: "AskUsContext"
//     Connection String:      "data source=HMECL001154;initial catalog=AskUs;persist security info=True;user id=sa;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Data.AskUs
{
    using System.Linq;

    #region Unit of work

    public interface IAskUsDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; } // AnswerComment
        System.Data.Entity.DbSet<AnswerReview> AnswerReviews { get; set; } // AnswerReview
        System.Data.Entity.DbSet<AnswerStatu> AnswerStatus { get; set; } // AnswerStatus
        System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        System.Data.Entity.DbSet<EmailAccount> EmailAccounts { get; set; } // EmailAccount
        System.Data.Entity.DbSet<LawFirm> LawFirms { get; set; } // LawFirm
        System.Data.Entity.DbSet<MessageTemplate> MessageTemplates { get; set; } // MessageTemplate
        System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; } // OrderNote
        System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; } // QuestionAnswer
        System.Data.Entity.DbSet<QuestionOrder> QuestionOrders { get; set; } // QuestionOrder
        System.Data.Entity.DbSet<QuestionReview> QuestionReviews { get; set; } // QuestionReview
        System.Data.Entity.DbSet<QuestionReviewHelpfulness> QuestionReviewHelpfulnesses { get; set; } // QuestionReviewHelpfulness
        System.Data.Entity.DbSet<QuestionsCategory> QuestionsCategories { get; set; } // QuestionsCategory
        System.Data.Entity.DbSet<QuestionStatu> QuestionStatus { get; set; } // QuestionStatus
        System.Data.Entity.DbSet<QuestionTag> QuestionTags { get; set; } // QuestionTag
        System.Data.Entity.DbSet<QuestionView> QuestionViews { get; set; } // QuestionView
        System.Data.Entity.DbSet<ServiceLocation> ServiceLocations { get; set; } // ServiceLocation
        System.Data.Entity.DbSet<Token> Tokens { get; set; } // Token
        System.Data.Entity.DbSet<User> Users { get; set; } // User
        System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRole

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AskUsDbContext : System.Data.Entity.DbContext, IAskUsDbContext
    {
        public System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; } // AnswerComment
        public System.Data.Entity.DbSet<AnswerReview> AnswerReviews { get; set; } // AnswerReview
        public System.Data.Entity.DbSet<AnswerStatu> AnswerStatus { get; set; } // AnswerStatus
        public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<EmailAccount> EmailAccounts { get; set; } // EmailAccount
        public System.Data.Entity.DbSet<LawFirm> LawFirms { get; set; } // LawFirm
        public System.Data.Entity.DbSet<MessageTemplate> MessageTemplates { get; set; } // MessageTemplate
        public System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; } // OrderNote
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; } // QuestionAnswer
        public System.Data.Entity.DbSet<QuestionOrder> QuestionOrders { get; set; } // QuestionOrder
        public System.Data.Entity.DbSet<QuestionReview> QuestionReviews { get; set; } // QuestionReview
        public System.Data.Entity.DbSet<QuestionReviewHelpfulness> QuestionReviewHelpfulnesses { get; set; } // QuestionReviewHelpfulness
        public System.Data.Entity.DbSet<QuestionsCategory> QuestionsCategories { get; set; } // QuestionsCategory
        public System.Data.Entity.DbSet<QuestionStatu> QuestionStatus { get; set; } // QuestionStatus
        public System.Data.Entity.DbSet<QuestionTag> QuestionTags { get; set; } // QuestionTag
        public System.Data.Entity.DbSet<QuestionView> QuestionViews { get; set; } // QuestionView
        public System.Data.Entity.DbSet<ServiceLocation> ServiceLocations { get; set; } // ServiceLocation
        public System.Data.Entity.DbSet<Token> Tokens { get; set; } // Token
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRole

        static AskUsDbContext()
        {
            System.Data.Entity.Database.SetInitializer<AskUsDbContext>(null);
        }

        public AskUsDbContext()
            : base("Name=AskUsContext")
        {
        }

        public AskUsDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public AskUsDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AskUsDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AskUsDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnswerCommentConfiguration());
            modelBuilder.Configurations.Add(new AnswerReviewConfiguration());
            modelBuilder.Configurations.Add(new AnswerStatuConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new EmailAccountConfiguration());
            modelBuilder.Configurations.Add(new LawFirmConfiguration());
            modelBuilder.Configurations.Add(new MessageTemplateConfiguration());
            modelBuilder.Configurations.Add(new OrderNoteConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new QuestionAnswerConfiguration());
            modelBuilder.Configurations.Add(new QuestionOrderConfiguration());
            modelBuilder.Configurations.Add(new QuestionReviewConfiguration());
            modelBuilder.Configurations.Add(new QuestionReviewHelpfulnessConfiguration());
            modelBuilder.Configurations.Add(new QuestionsCategoryConfiguration());
            modelBuilder.Configurations.Add(new QuestionStatuConfiguration());
            modelBuilder.Configurations.Add(new QuestionTagConfiguration());
            modelBuilder.Configurations.Add(new QuestionViewConfiguration());
            modelBuilder.Configurations.Add(new ServiceLocationConfiguration());
            modelBuilder.Configurations.Add(new TokenConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserRoleConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnswerCommentConfiguration(schema));
            modelBuilder.Configurations.Add(new AnswerReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new AnswerStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAccountConfiguration(schema));
            modelBuilder.Configurations.Add(new LawFirmConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageTemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderNoteConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionReviewHelpfulnessConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionsCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionTagConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionViewConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceLocationConfiguration(schema));
            modelBuilder.Configurations.Add(new TokenConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRoleConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class AskUsDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<AskUsDbContext>
    {
        public AskUsDbContext Create()
        {
            return new AskUsDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeAskUsDbContext : IAskUsDbContext
    {
        public System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; }
        public System.Data.Entity.DbSet<AnswerReview> AnswerReviews { get; set; }
        public System.Data.Entity.DbSet<AnswerStatu> AnswerStatus { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<EmailAccount> EmailAccounts { get; set; }
        public System.Data.Entity.DbSet<LawFirm> LawFirms { get; set; }
        public System.Data.Entity.DbSet<MessageTemplate> MessageTemplates { get; set; }
        public System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; }
        public System.Data.Entity.DbSet<Question> Questions { get; set; }
        public System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; }
        public System.Data.Entity.DbSet<QuestionOrder> QuestionOrders { get; set; }
        public System.Data.Entity.DbSet<QuestionReview> QuestionReviews { get; set; }
        public System.Data.Entity.DbSet<QuestionReviewHelpfulness> QuestionReviewHelpfulnesses { get; set; }
        public System.Data.Entity.DbSet<QuestionsCategory> QuestionsCategories { get; set; }
        public System.Data.Entity.DbSet<QuestionStatu> QuestionStatus { get; set; }
        public System.Data.Entity.DbSet<QuestionTag> QuestionTags { get; set; }
        public System.Data.Entity.DbSet<QuestionView> QuestionViews { get; set; }
        public System.Data.Entity.DbSet<ServiceLocation> ServiceLocations { get; set; }
        public System.Data.Entity.DbSet<Token> Tokens { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; }

        public FakeAskUsDbContext()
        {
            AnswerComments = new FakeDbSet<AnswerComment>("Id", "Name", "IsActive");
            AnswerReviews = new FakeDbSet<AnswerReview>("Id", "UserId", "QuestionAnswerId", "IsApproved", "IsReviewed", "CreatedOnUtc");
            AnswerStatus = new FakeDbSet<AnswerStatu>("Id", "Name", "IsActive");
            Customers = new FakeDbSet<Customer>("Id", "FirstName", "LastName", "IsActive", "CreatedDate");
            EmailAccounts = new FakeDbSet<EmailAccount>("Id", "Email", "Host", "Port", "Username", "Password", "EnableSsl", "UseDefaultCredentials");
            LawFirms = new FakeDbSet<LawFirm>("Id");
            MessageTemplates = new FakeDbSet<MessageTemplate>("Id", "Name", "IsActive", "DelayPeriodId", "AttachedDownloadId", "EmailAccountId", "LimitedToStores");
            OrderNotes = new FakeDbSet<OrderNote>("Id", "QuestionOrder", "Note", "DisplayToCustomer", "CreatedOnUtc");
            Questions = new FakeDbSet<Question>("Id");
            QuestionAnswers = new FakeDbSet<QuestionAnswer>("Id", "AnswerDescription", "AnswerStatusId", "ParentAnswerId", "FromUserId", "ToUserId", "QuestionId", "Published", "IsActive", "CreatedBy", "CreatedDate");
            QuestionOrders = new FakeDbSet<QuestionOrder>("Id", "OrderGuid", "QuestionId", "UserId", "BillingAddressId", "PickUpInStore", "OrderStatusId", "ShippingStatusId", "PaymentStatusId", "OrderSubtotalInclTax", "OrderSubtotalExclTax", "OrderSubTotalDiscountInclTax", "OrderSubTotalDiscountExclTax", "OrderShippingInclTax", "OrderShippingExclTax", "PaymentMethodAdditionalFeeInclTax", "PaymentMethodAdditionalFeeExclTax", "OrderTax", "OrderDiscount", "OrderTotal", "RefundedAmount", "AllowStoringCreditCardNumber", "Deleted", "CreatedOnUtc", "CustomOrderNumber");
            QuestionReviews = new FakeDbSet<QuestionReview>("Id", "UserId", "QuestionId", "IsApproved", "Rating", "HelpfulYesTotal", "HelpfulNoTotal", "CreatedOnUtc");
            QuestionReviewHelpfulnesses = new FakeDbSet<QuestionReviewHelpfulness>("Id", "QuestionReviewId", "WasHelpful", "UserId");
            QuestionsCategories = new FakeDbSet<QuestionsCategory>("Id", "Name", "IsActive");
            QuestionStatus = new FakeDbSet<QuestionStatu>("Id", "Status", "IsActive", "CreatedBy", "CreatedDate");
            QuestionTags = new FakeDbSet<QuestionTag>("Id", "Name");
            QuestionViews = new FakeDbSet<QuestionView>("Id", "QuestionId", "CreatedOnUtc");
            ServiceLocations = new FakeDbSet<ServiceLocation>("Id");
            Tokens = new FakeDbSet<Token>("TokenId", "UserId", "AuthToken", "IssuedOn", "ExpiresOn");
            Users = new FakeDbSet<User>("Id");
            UserRoles = new FakeDbSet<UserRole>("Id", "RoleName", "IsActive", "CreatedBy", "CreatedDate");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AnswerComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerComment
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
    }

    // AnswerReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerReview
    {
        public int Id { get; set; } // Id (Primary key)
        public int UserId { get; set; } // UserId (Primary key)
        public int QuestionAnswerId { get; set; } // QuestionAnswerId (Primary key)
        public bool IsApproved { get; set; } // IsApproved (Primary key)
        public bool IsReviewed { get; set; } // IsReviewed (Primary key)
        public string Title { get; set; } // Title
        public string ReviewText { get; set; } // ReviewText
        public string ReplyText { get; set; } // ReplyText
        public int? Rating { get; set; } // Rating
        public System.DateTime CreatedOnUtc { get; set; } // CreatedOnUtc (Primary key)
    }

    // AnswerStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerStatu
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Customer
    {
        public long Id { get; set; } // Id (Primary key)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)
        public string LastName { get; set; } // LastName (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
        public System.DateTime CreatedDate { get; set; } // CreatedDate (Primary key)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // EmailAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class EmailAccount
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (Primary key) (length: 255)
        public string DisplayName { get; set; } // DisplayName (length: 255)
        public string Host { get; set; } // Host (Primary key) (length: 255)
        public int Port { get; set; } // Port (Primary key)
        public string Username { get; set; } // Username (Primary key) (length: 255)
        public string Password { get; set; } // Password (Primary key) (length: 255)
        public bool EnableSsl { get; set; } // EnableSsl (Primary key)
        public bool UseDefaultCredentials { get; set; } // UseDefaultCredentials (Primary key)
    }

    // LawFirm
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class LawFirm
    {
        public long Id { get; set; } // Id (Primary key)
        public string FirmName { get; set; } // FirmName (length: 100)
        public string EmailId { get; set; } // EmailId (length: 100)
        public string Education { get; set; } // Education (length: 50)
        public int? PictureId { get; set; } // PictureId
        public string EnrollmentNumber { get; set; } // EnrollmentNumber (length: 50)
        public int? Experience { get; set; } // Experience
        public System.DateTime? PracticeStartDate { get; set; } // PracticeStartDate
        public string PracticeCourt { get; set; } // PracticeCourt (length: 50)
        public string BarMember { get; set; } // BarMember (length: 50)
        public string Language { get; set; } // Language (length: 100)
        public string PracticeDescription { get; set; } // PracticeDescription (length: 500)
        public bool? AllowCall { get; set; } // AllowCall
        public bool? AllowWhatsApp { get; set; } // AllowWhatsApp
        public string WhatsAppNumber { get; set; } // WhatsAppNumber (length: 50)
        public bool? AllowEmail { get; set; } // AllowEmail
        public int? ServiceLocationId { get; set; } // ServiceLocationId
        public bool? IsActive { get; set; } // IsActive
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // MessageTemplate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class MessageTemplate
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 200)
        public string BccEmailAddresses { get; set; } // BccEmailAddresses (length: 200)
        public string Subject { get; set; } // Subject (length: 1000)
        public string Body { get; set; } // Body
        public bool IsActive { get; set; } // IsActive (Primary key)
        public int? DelayBeforeSend { get; set; } // DelayBeforeSend
        public int DelayPeriodId { get; set; } // DelayPeriodId (Primary key)
        public int AttachedDownloadId { get; set; } // AttachedDownloadId (Primary key)
        public int EmailAccountId { get; set; } // EmailAccountId (Primary key)
        public bool LimitedToStores { get; set; } // LimitedToStores (Primary key)
    }

    // OrderNote
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class OrderNote
    {
        public int Id { get; set; } // Id (Primary key)
        public long QuestionOrder { get; set; } // QuestionOrder (Primary key)
        public string Note { get; set; } // Note (Primary key)
        public bool DisplayToCustomer { get; set; } // DisplayToCustomer (Primary key)
        public System.DateTime CreatedOnUtc { get; set; } // CreatedOnUtc (Primary key)
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Question
    {
        public long Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 500)
        public int? QuestionsCategoryId { get; set; } // QuestionsCategoryId
        public string QuestionDetail { get; set; } // QuestionDetail
        public bool? Notification { get; set; } // Notification
        public bool? GetCall { get; set; } // GetCall
        public string FilePath { get; set; } // FilePath (length: 500)
        public long? UserId { get; set; } // UserId
        public int? StatusId { get; set; } // StatusId
        public int? ServiceLocationId { get; set; } // ServiceLocationId
        public bool? Published { get; set; } // Published
        public bool? IsActive { get; set; } // IsActive
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // QuestionAnswer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionAnswer
    {
        public long Id { get; set; } // Id (Primary key)
        public string AnswerTitle { get; set; } // AnswerTitle (length: 50)
        public string AnswerDescription { get; set; } // AnswerDescription (Primary key)
        public int AnswerStatusId { get; set; } // AnswerStatusId (Primary key)
        public int? AnswerCommentId { get; set; } // AnswerCommentId
        public int ParentAnswerId { get; set; } // ParentAnswerId (Primary key)
        public long FromUserId { get; set; } // FromUserId (Primary key)
        public long ToUserId { get; set; } // ToUserId (Primary key)
        public long QuestionId { get; set; } // QuestionId (Primary key)
        public bool Published { get; set; } // Published (Primary key)
        public bool IsActive { get; set; } // IsActive (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate (Primary key)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // QuestionOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionOrder
    {
        public long Id { get; set; } // Id (Primary key)
        public System.Guid OrderGuid { get; set; } // OrderGuid (Primary key)
        public int QuestionId { get; set; } // QuestionId (Primary key)
        public int UserId { get; set; } // UserId (Primary key)
        public int BillingAddressId { get; set; } // BillingAddressId (Primary key)
        public int? ShippingAddressId { get; set; } // ShippingAddressId
        public int? PickupAddressId { get; set; } // PickupAddressId
        public bool PickUpInStore { get; set; } // PickUpInStore (Primary key)
        public int OrderStatusId { get; set; } // OrderStatusId (Primary key)
        public int ShippingStatusId { get; set; } // ShippingStatusId (Primary key)
        public int PaymentStatusId { get; set; } // PaymentStatusId (Primary key)
        public string PaymentMethodSystemName { get; set; } // PaymentMethodSystemName
        public decimal OrderSubtotalInclTax { get; set; } // OrderSubtotalInclTax (Primary key)
        public decimal OrderSubtotalExclTax { get; set; } // OrderSubtotalExclTax (Primary key)
        public decimal OrderSubTotalDiscountInclTax { get; set; } // OrderSubTotalDiscountInclTax (Primary key)
        public decimal OrderSubTotalDiscountExclTax { get; set; } // OrderSubTotalDiscountExclTax (Primary key)
        public decimal OrderShippingInclTax { get; set; } // OrderShippingInclTax (Primary key)
        public decimal OrderShippingExclTax { get; set; } // OrderShippingExclTax (Primary key)
        public decimal PaymentMethodAdditionalFeeInclTax { get; set; } // PaymentMethodAdditionalFeeInclTax (Primary key)
        public decimal PaymentMethodAdditionalFeeExclTax { get; set; } // PaymentMethodAdditionalFeeExclTax (Primary key)
        public string TaxRates { get; set; } // TaxRates
        public decimal OrderTax { get; set; } // OrderTax (Primary key)
        public decimal OrderDiscount { get; set; } // OrderDiscount (Primary key)
        public decimal OrderTotal { get; set; } // OrderTotal (Primary key)
        public decimal RefundedAmount { get; set; } // RefundedAmount (Primary key)
        public string CheckoutAttributeDescription { get; set; } // CheckoutAttributeDescription
        public string CheckoutAttributesXml { get; set; } // CheckoutAttributesXml
        public string CustomerIp { get; set; } // CustomerIp
        public bool AllowStoringCreditCardNumber { get; set; } // AllowStoringCreditCardNumber (Primary key)
        public string CardType { get; set; } // CardType
        public string CardName { get; set; } // CardName
        public string CardNumber { get; set; } // CardNumber
        public string MaskedCreditCardNumber { get; set; } // MaskedCreditCardNumber
        public string CardCvv2 { get; set; } // CardCvv2
        public string CardExpirationMonth { get; set; } // CardExpirationMonth
        public string CardExpirationYear { get; set; } // CardExpirationYear
        public string AuthorizationTransactionId { get; set; } // AuthorizationTransactionId
        public string AuthorizationTransactionCode { get; set; } // AuthorizationTransactionCode
        public string AuthorizationTransactionResult { get; set; } // AuthorizationTransactionResult
        public string CaptureTransactionId { get; set; } // CaptureTransactionId
        public string CaptureTransactionResult { get; set; } // CaptureTransactionResult
        public string SubscriptionTransactionId { get; set; } // SubscriptionTransactionId
        public System.DateTime? PaidDateUtc { get; set; } // PaidDateUtc
        public string ShippingMethod { get; set; } // ShippingMethod
        public string ShippingRateComputationMethodSystemName { get; set; } // ShippingRateComputationMethodSystemName
        public string CustomValuesXml { get; set; } // CustomValuesXml
        public bool Deleted { get; set; } // Deleted (Primary key)
        public System.DateTime CreatedOnUtc { get; set; } // CreatedOnUtc (Primary key)
        public string CustomOrderNumber { get; set; } // CustomOrderNumber (Primary key)
    }

    // QuestionReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionReview
    {
        public int Id { get; set; } // Id (Primary key)
        public int UserId { get; set; } // UserId (Primary key)
        public int QuestionId { get; set; } // QuestionId (Primary key)
        public bool IsApproved { get; set; } // IsApproved (Primary key)
        public string Title { get; set; } // Title
        public string ReviewText { get; set; } // ReviewText
        public string ReplyText { get; set; } // ReplyText
        public int Rating { get; set; } // Rating (Primary key)
        public int HelpfulYesTotal { get; set; } // HelpfulYesTotal (Primary key)
        public int HelpfulNoTotal { get; set; } // HelpfulNoTotal (Primary key)
        public System.DateTime CreatedOnUtc { get; set; } // CreatedOnUtc (Primary key)
    }

    // QuestionReviewHelpfulness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionReviewHelpfulness
    {
        public int Id { get; set; } // Id (Primary key)
        public int QuestionReviewId { get; set; } // QuestionReviewId (Primary key)
        public bool WasHelpful { get; set; } // WasHelpful (Primary key)
        public int UserId { get; set; } // UserId (Primary key)
    }

    // QuestionsCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionsCategory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // QuestionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionStatu
    {
        public int Id { get; set; } // Id (Primary key)
        public string Status { get; set; } // Status (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate (Primary key)
    }

    // QuestionTag
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionTag
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 400)
    }

    // QuestionView
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionView
    {
        public long Id { get; set; } // Id (Primary key)
        public int? UserId { get; set; } // UserId
        public int QuestionId { get; set; } // QuestionId (Primary key)
        public string IpAddress { get; set; } // IpAddress (length: 15)
        public System.DateTime CreatedOnUtc { get; set; } // CreatedOnUtc (Primary key)
    }

    // ServiceLocation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ServiceLocation
    {
        public int Id { get; set; } // Id (Primary key)
        public string Location { get; set; } // Location (length: 500)
        public string City { get; set; } // City (length: 50)
        public string State { get; set; } // State (length: 50)
        public string Country { get; set; } // Country (length: 50)
        public string Zipcode { get; set; } // Zipcode (length: 50)
        public string IpAddress { get; set; } // IpAddress
    }

    // Token
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Token
    {
        public int TokenId { get; set; } // TokenId (Primary key)
        public int UserId { get; set; } // UserId (Primary key)
        public string AuthToken { get; set; } // AuthToken (Primary key) (length: 250)
        public System.DateTime IssuedOn { get; set; } // IssuedOn (Primary key)
        public System.DateTime ExpiresOn { get; set; } // ExpiresOn (Primary key)
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class User
    {
        public long Id { get; set; } // Id (Primary key)
        public string UserName { get; set; } // UserName (length: 50)
        public string Email { get; set; } // Email (length: 100)
        public string Password { get; set; } // Password (length: 50)
        public int? RoleId { get; set; } // RoleId
        public long? LawFirmId { get; set; } // LawFirmId
        public long? CustomerId { get; set; } // CustomerId
        public bool? IsActive { get; set; } // IsActive
        public bool? IsDeleted { get; set; } // IsDeleted
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // UserRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserRole
    {
        public int Id { get; set; } // Id (Primary key)
        public string RoleName { get; set; } // RoleName (Primary key) (length: 50)
        public bool IsActive { get; set; } // IsActive (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate (Primary key)
    }

    #endregion

    #region POCO Configuration

    // AnswerComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerCommentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnswerComment>
    {
        public AnswerCommentConfiguration()
            : this("dbo")
        {
        }

        public AnswerCommentConfiguration(string schema)
        {
            ToTable("AnswerComment", schema);
            HasKey(x => new { x.Id, x.Name, x.IsActive });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // AnswerReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnswerReview>
    {
        public AnswerReviewConfiguration()
            : this("dbo")
        {
        }

        public AnswerReviewConfiguration(string schema)
        {
            ToTable("AnswerReview", schema);
            HasKey(x => new { x.Id, x.UserId, x.QuestionAnswerId, x.IsApproved, x.IsReviewed, x.CreatedOnUtc });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionAnswerId).HasColumnName(@"QuestionAnswerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsReviewed).HasColumnName(@"IsReviewed").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ReviewText).HasColumnName(@"ReviewText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ReplyText).HasColumnName(@"ReplyText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Rating).HasColumnName(@"Rating").HasColumnType("int").IsOptional();
            Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // AnswerStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnswerStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnswerStatu>
    {
        public AnswerStatuConfiguration()
            : this("dbo")
        {
        }

        public AnswerStatuConfiguration(string schema)
        {
            ToTable("AnswerStatus", schema);
            HasKey(x => new { x.Id, x.Name, x.IsActive });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Customer>
    {
        public CustomerConfiguration()
            : this("dbo")
        {
        }

        public CustomerConfiguration(string schema)
        {
            ToTable("Customer", schema);
            HasKey(x => new { x.Id, x.FirstName, x.LastName, x.IsActive, x.CreatedDate });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // EmailAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class EmailAccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailAccount>
    {
        public EmailAccountConfiguration()
            : this("dbo")
        {
        }

        public EmailAccountConfiguration(string schema)
        {
            ToTable("EmailAccount", schema);
            HasKey(x => new { x.Id, x.Email, x.Host, x.Port, x.Username, x.Password, x.EnableSsl, x.UseDefaultCredentials });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Host).HasColumnName(@"Host").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Port).HasColumnName(@"Port").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EnableSsl).HasColumnName(@"EnableSsl").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UseDefaultCredentials).HasColumnName(@"UseDefaultCredentials").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // LawFirm
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class LawFirmConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LawFirm>
    {
        public LawFirmConfiguration()
            : this("dbo")
        {
        }

        public LawFirmConfiguration(string schema)
        {
            ToTable("LawFirm", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirmName).HasColumnName(@"FirmName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EmailId).HasColumnName(@"EmailId").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PictureId).HasColumnName(@"PictureId").HasColumnType("int").IsOptional();
            Property(x => x.EnrollmentNumber).HasColumnName(@"EnrollmentNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Experience).HasColumnName(@"Experience").HasColumnType("int").IsOptional();
            Property(x => x.PracticeStartDate).HasColumnName(@"PracticeStartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.PracticeCourt).HasColumnName(@"PracticeCourt").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BarMember).HasColumnName(@"BarMember").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Language).HasColumnName(@"Language").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.PracticeDescription).HasColumnName(@"PracticeDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.AllowCall).HasColumnName(@"AllowCall").HasColumnType("bit").IsOptional();
            Property(x => x.AllowWhatsApp).HasColumnName(@"AllowWhatsApp").HasColumnType("bit").IsOptional();
            Property(x => x.WhatsAppNumber).HasColumnName(@"WhatsAppNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AllowEmail).HasColumnName(@"AllowEmail").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceLocationId).HasColumnName(@"ServiceLocationId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // MessageTemplate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class MessageTemplateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MessageTemplate>
    {
        public MessageTemplateConfiguration()
            : this("dbo")
        {
        }

        public MessageTemplateConfiguration(string schema)
        {
            ToTable("MessageTemplate", schema);
            HasKey(x => new { x.Id, x.Name, x.IsActive, x.DelayPeriodId, x.AttachedDownloadId, x.EmailAccountId, x.LimitedToStores });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(200).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BccEmailAddresses).HasColumnName(@"BccEmailAddresses").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DelayBeforeSend).HasColumnName(@"DelayBeforeSend").HasColumnType("int").IsOptional();
            Property(x => x.DelayPeriodId).HasColumnName(@"DelayPeriodId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttachedDownloadId).HasColumnName(@"AttachedDownloadId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAccountId).HasColumnName(@"EmailAccountId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LimitedToStores).HasColumnName(@"LimitedToStores").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // OrderNote
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class OrderNoteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrderNote>
    {
        public OrderNoteConfiguration()
            : this("dbo")
        {
        }

        public OrderNoteConfiguration(string schema)
        {
            ToTable("OrderNote", schema);
            HasKey(x => new { x.Id, x.QuestionOrder, x.Note, x.DisplayToCustomer, x.CreatedOnUtc });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionOrder).HasColumnName(@"QuestionOrder").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisplayToCustomer).HasColumnName(@"DisplayToCustomer").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Question>
    {
        public QuestionConfiguration()
            : this("dbo")
        {
        }

        public QuestionConfiguration(string schema)
        {
            ToTable("Question", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.QuestionsCategoryId).HasColumnName(@"QuestionsCategoryId").HasColumnType("int").IsOptional();
            Property(x => x.QuestionDetail).HasColumnName(@"QuestionDetail").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Notification).HasColumnName(@"Notification").HasColumnType("bit").IsOptional();
            Property(x => x.GetCall).HasColumnName(@"GetCall").HasColumnType("bit").IsOptional();
            Property(x => x.FilePath).HasColumnName(@"FilePath").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsOptional();
            Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsOptional();
            Property(x => x.ServiceLocationId).HasColumnName(@"ServiceLocationId").HasColumnType("int").IsOptional();
            Property(x => x.Published).HasColumnName(@"Published").HasColumnType("bit").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // QuestionAnswer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionAnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionAnswer>
    {
        public QuestionAnswerConfiguration()
            : this("dbo")
        {
        }

        public QuestionAnswerConfiguration(string schema)
        {
            ToTable("QuestionAnswer", schema);
            HasKey(x => new { x.Id, x.AnswerDescription, x.AnswerStatusId, x.ParentAnswerId, x.FromUserId, x.ToUserId, x.QuestionId, x.Published, x.IsActive, x.CreatedBy, x.CreatedDate });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AnswerTitle).HasColumnName(@"AnswerTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AnswerDescription).HasColumnName(@"AnswerDescription").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnswerStatusId).HasColumnName(@"AnswerStatusId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnswerCommentId).HasColumnName(@"AnswerCommentId").HasColumnType("int").IsOptional();
            Property(x => x.ParentAnswerId).HasColumnName(@"ParentAnswerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FromUserId).HasColumnName(@"FromUserId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ToUserId).HasColumnName(@"ToUserId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Published).HasColumnName(@"Published").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // QuestionOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionOrderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionOrder>
    {
        public QuestionOrderConfiguration()
            : this("dbo")
        {
        }

        public QuestionOrderConfiguration(string schema)
        {
            ToTable("QuestionOrder", schema);
            HasKey(x => new { x.Id, x.OrderGuid, x.QuestionId, x.UserId, x.BillingAddressId, x.PickUpInStore, x.OrderStatusId, x.ShippingStatusId, x.PaymentStatusId, x.OrderSubtotalInclTax, x.OrderSubtotalExclTax, x.OrderSubTotalDiscountInclTax, x.OrderSubTotalDiscountExclTax, x.OrderShippingInclTax, x.OrderShippingExclTax, x.PaymentMethodAdditionalFeeInclTax, x.PaymentMethodAdditionalFeeExclTax, x.OrderTax, x.OrderDiscount, x.OrderTotal, x.RefundedAmount, x.AllowStoringCreditCardNumber, x.Deleted, x.CreatedOnUtc, x.CustomOrderNumber });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OrderGuid).HasColumnName(@"OrderGuid").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BillingAddressId).HasColumnName(@"BillingAddressId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShippingAddressId).HasColumnName(@"ShippingAddressId").HasColumnType("int").IsOptional();
            Property(x => x.PickupAddressId).HasColumnName(@"PickupAddressId").HasColumnType("int").IsOptional();
            Property(x => x.PickUpInStore).HasColumnName(@"PickUpInStore").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderStatusId).HasColumnName(@"OrderStatusId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShippingStatusId).HasColumnName(@"ShippingStatusId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaymentStatusId).HasColumnName(@"PaymentStatusId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaymentMethodSystemName).HasColumnName(@"PaymentMethodSystemName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrderSubtotalInclTax).HasColumnName(@"OrderSubtotalInclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderSubtotalExclTax).HasColumnName(@"OrderSubtotalExclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderSubTotalDiscountInclTax).HasColumnName(@"OrderSubTotalDiscountInclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderSubTotalDiscountExclTax).HasColumnName(@"OrderSubTotalDiscountExclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderShippingInclTax).HasColumnName(@"OrderShippingInclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderShippingExclTax).HasColumnName(@"OrderShippingExclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaymentMethodAdditionalFeeInclTax).HasColumnName(@"PaymentMethodAdditionalFeeInclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaymentMethodAdditionalFeeExclTax).HasColumnName(@"PaymentMethodAdditionalFeeExclTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TaxRates).HasColumnName(@"TaxRates").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrderTax).HasColumnName(@"OrderTax").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderDiscount).HasColumnName(@"OrderDiscount").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrderTotal).HasColumnName(@"OrderTotal").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RefundedAmount).HasColumnName(@"RefundedAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CheckoutAttributeDescription).HasColumnName(@"CheckoutAttributeDescription").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CheckoutAttributesXml).HasColumnName(@"CheckoutAttributesXml").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CustomerIp).HasColumnName(@"CustomerIp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AllowStoringCreditCardNumber).HasColumnName(@"AllowStoringCreditCardNumber").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CardType).HasColumnName(@"CardType").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CardName).HasColumnName(@"CardName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CardNumber).HasColumnName(@"CardNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MaskedCreditCardNumber).HasColumnName(@"MaskedCreditCardNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CardCvv2).HasColumnName(@"CardCvv2").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CardExpirationMonth).HasColumnName(@"CardExpirationMonth").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CardExpirationYear).HasColumnName(@"CardExpirationYear").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AuthorizationTransactionId).HasColumnName(@"AuthorizationTransactionId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AuthorizationTransactionCode).HasColumnName(@"AuthorizationTransactionCode").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AuthorizationTransactionResult).HasColumnName(@"AuthorizationTransactionResult").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CaptureTransactionId).HasColumnName(@"CaptureTransactionId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CaptureTransactionResult).HasColumnName(@"CaptureTransactionResult").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SubscriptionTransactionId).HasColumnName(@"SubscriptionTransactionId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PaidDateUtc).HasColumnName(@"PaidDateUtc").HasColumnType("datetime").IsOptional();
            Property(x => x.ShippingMethod).HasColumnName(@"ShippingMethod").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ShippingRateComputationMethodSystemName).HasColumnName(@"ShippingRateComputationMethodSystemName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CustomValuesXml).HasColumnName(@"CustomValuesXml").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CustomOrderNumber).HasColumnName(@"CustomOrderNumber").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // QuestionReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionReview>
    {
        public QuestionReviewConfiguration()
            : this("dbo")
        {
        }

        public QuestionReviewConfiguration(string schema)
        {
            ToTable("QuestionReview", schema);
            HasKey(x => new { x.Id, x.UserId, x.QuestionId, x.IsApproved, x.Rating, x.HelpfulYesTotal, x.HelpfulNoTotal, x.CreatedOnUtc });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ReviewText).HasColumnName(@"ReviewText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ReplyText).HasColumnName(@"ReplyText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Rating).HasColumnName(@"Rating").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HelpfulYesTotal).HasColumnName(@"HelpfulYesTotal").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HelpfulNoTotal).HasColumnName(@"HelpfulNoTotal").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // QuestionReviewHelpfulness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionReviewHelpfulnessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionReviewHelpfulness>
    {
        public QuestionReviewHelpfulnessConfiguration()
            : this("dbo")
        {
        }

        public QuestionReviewHelpfulnessConfiguration(string schema)
        {
            ToTable("QuestionReviewHelpfulness", schema);
            HasKey(x => new { x.Id, x.QuestionReviewId, x.WasHelpful, x.UserId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionReviewId).HasColumnName(@"QuestionReviewId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WasHelpful).HasColumnName(@"WasHelpful").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // QuestionsCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionsCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionsCategory>
    {
        public QuestionsCategoryConfiguration()
            : this("dbo")
        {
        }

        public QuestionsCategoryConfiguration(string schema)
        {
            ToTable("QuestionsCategory", schema);
            HasKey(x => new { x.Id, x.Name, x.IsActive });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // QuestionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionStatu>
    {
        public QuestionStatuConfiguration()
            : this("dbo")
        {
        }

        public QuestionStatuConfiguration(string schema)
        {
            ToTable("QuestionStatus", schema);
            HasKey(x => new { x.Id, x.Status, x.IsActive, x.CreatedBy, x.CreatedDate });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // QuestionTag
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionTagConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionTag>
    {
        public QuestionTagConfiguration()
            : this("dbo")
        {
        }

        public QuestionTagConfiguration(string schema)
        {
            ToTable("QuestionTag", schema);
            HasKey(x => new { x.Id, x.Name });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(400).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // QuestionView
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class QuestionViewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionView>
    {
        public QuestionViewConfiguration()
            : this("dbo")
        {
        }

        public QuestionViewConfiguration(string schema)
        {
            ToTable("QuestionView", schema);
            HasKey(x => new { x.Id, x.QuestionId, x.CreatedOnUtc });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsOptional();
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
            Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ServiceLocation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ServiceLocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ServiceLocation>
    {
        public ServiceLocationConfiguration()
            : this("dbo")
        {
        }

        public ServiceLocationConfiguration(string schema)
        {
            ToTable("ServiceLocation", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Zipcode).HasColumnName(@"Zipcode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // Token
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class TokenConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Token>
    {
        public TokenConfiguration()
            : this("dbo")
        {
        }

        public TokenConfiguration(string schema)
        {
            ToTable("Token", schema);
            HasKey(x => new { x.TokenId, x.UserId, x.AuthToken, x.IssuedOn, x.ExpiresOn });

            Property(x => x.TokenId).HasColumnName(@"TokenId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AuthToken).HasColumnName(@"AuthToken").HasColumnType("nvarchar").IsRequired().HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IssuedOn).HasColumnName(@"IssuedOn").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ExpiresOn).HasColumnName(@"ExpiresOn").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsOptional();
            Property(x => x.LawFirmId).HasColumnName(@"LawFirmId").HasColumnType("bigint").IsOptional();
            Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("bigint").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // UserRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserRole>
    {
        public UserRoleConfiguration()
            : this("dbo")
        {
        }

        public UserRoleConfiguration(string schema)
        {
            ToTable("UserRole", schema);
            HasKey(x => new { x.Id, x.RoleName, x.IsActive, x.CreatedBy, x.CreatedDate });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    #endregion

}
// </auto-generated>

